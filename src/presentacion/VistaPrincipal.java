/**
 * Resuelve el taller número 1 del módulo 7 "Integración Módulos de Software",
 * Programa CORFO "Mil Programadores".
 *
 * @autor Daniel Zúñiga Correa, 2017-12-24 (yyyy-mm-dd)
 */
package presentacion;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import negocio.*;

/**
 * Clase JFrame correspondiente a la vista principal del proyecto.
 *
 * @author Daniel Zúñiga Correa, 2017-12-24 (yyyy-mm-dd)
 */
public class VistaPrincipal extends javax.swing.JFrame {
//    Declaración de variables de clase para su utilización en los métodos
//    contenidosen esta vista.

    private static final String url = "http://mindicador.cl/api/";
    public Indicador dolar = new Indicador(url, "dolar");
    public Indicador euro = new Indicador(url, "euro");
    public Producto productoTemp = new Producto();
    public boolean problemasConexion = false;

    public VistaPrincipal() {
//        Inicialización de la vista
        initComponents();
//        Posiciona la vista al medio de la pantalla
        this.setLocationRelativeTo(null);
//        Verifica que los indicadores esten disponibles en el url respectivo
        if (dolar.conecta()) {
            dolar.consumir();
        } else {
            JOptionPane.showMessageDialog(null, "Error en la conexión a "
                    + url + "dolar\n");
            problemasConexion = true;
        }
        if (euro.conecta()) {
            euro.consumir();
        } else {
            JOptionPane.showMessageDialog(null, "Error en la conexión a "
                    + url + "euro\n");
            problemasConexion = true;
        }
//        Sale del programa si los indicadores no estan disponibles
        if (problemasConexion) {
            System.exit(0);
        }
//        Ingresa la información relativa al indicador seleccionado en el 
//        elemento JComboBox
        llenarDatosIndicador();
//        Valida que existan productos en la base de datos para llenar el 
//        elemento JTable, en caso contrario solicita se ingrese un nuevo
//        producto
        compruebaBD();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbProductos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        txtFechaMoneda = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        cboIndicadores = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtValorMoneda = new javax.swing.JTextField();
        txtId = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        btnRefrescar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PRODUCTOS");
        setResizable(false);

        tbProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbProductosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbProductos);
        if (tbProductos.getColumnModel().getColumnCount() > 0) {
            tbProductos.getColumnModel().getColumn(0).setPreferredWidth(30);
            tbProductos.getColumnModel().getColumn(1).setPreferredWidth(70);
            tbProductos.getColumnModel().getColumn(2).setPreferredWidth(70);
            tbProductos.getColumnModel().getColumn(3).setPreferredWidth(40);
        }

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 0, 36)); // NOI18N
        jLabel1.setText("PRODUCTOS");

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        txtFechaMoneda.setEditable(false);

        jLabel2.setText("Id Producto");

        jLabel3.setText("Nombre Producto");

        cboIndicadores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "dolar", "euro" }));
        cboIndicadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboIndicadoresActionPerformed(evt);
            }
        });

        jLabel4.setText("Moneda Utilizada");

        jLabel5.setText("Valor Moneda");

        txtValorMoneda.setEditable(false);
        txtValorMoneda.setText("0");

        jLabel6.setText("Fecha Valor Moneda");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnRefrescar.setText("Refrescar");
        btnRefrescar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefrescarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cboIndicadores, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtValorMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFechaMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnEliminar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSalir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(92, 92, 92)
                                .addComponent(btnRefrescar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalir)
                    .addComponent(btnRefrescar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboIndicadores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(btnGuardar))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtValorMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtFechaMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
//        Sale del sistema si se presiona el botón "x"
        System.exit(0);
    }//GEN-LAST:event_btnSalirActionPerformed
    private void cboIndicadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboIndicadoresActionPerformed
//        Modifica los datos correspondientes al indicador seleccionado en el
//        elemento JComboBox
        llenarDatosIndicador();
    }//GEN-LAST:event_cboIndicadoresActionPerformed
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
//        Verifica que el Id del producto sea un entero positivo, de ser así
//        modifica la base de datos en consecuencia (modifica o inserta el
//        producto, según corresponda)
        if (validaDatos()) {
            grabaProducto();
            llenarDatosIndicador();
            compruebaBD();
        } else {
            idErrado();
        }
    }//GEN-LAST:event_btnGuardarActionPerformed
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
//        Elimina de la base de datos el producto seleccionado
        instanciarProductoTemp();
//        Dada la importancia de la eliminación, se solicita verificación previa
        if (pideConfirmacion("ESTA ACCION ELIMINARA"
                + " PERMANENTEMENTE EL PRDUCTO") == JOptionPane.YES_OPTION) {
            productoTemp.eliminar();
            llenarDatos(0);
            compruebaBD();
        }
    }//GEN-LAST:event_btnEliminarActionPerformed
    private void tbProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbProductosMouseClicked
//        Ingresa los datos del producto a los elementos JTextField, acorde al
//        producto seleccionado desde el elemento JTable
        llenarDatos(tbProductos.getSelectedRow());
    }//GEN-LAST:event_tbProductosMouseClicked

    private void btnRefrescarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefrescarActionPerformed
//        Refresca la información contenida en la vista 
        llenarDatosIndicador();
        compruebaBD();
    }//GEN-LAST:event_btnRefrescarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        new VistaPrincipal().setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnRefrescar;
    private javax.swing.JButton btnSalir;
    private static javax.swing.JComboBox<String> cboIndicadores;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable tbProductos;
    private javax.swing.JTextField txtFechaMoneda;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtValorMoneda;
    // End of variables declaration//GEN-END:variables

    /**
     * Método para determinar cual objeto clase Indicador corresponde a la
     * opción seleccionada en el combo box respectivo
     *
     * @return retorna el objeto clase Indicador que corresponde a la opción
     * seleccionada en el combo box
     */
    private Indicador indicadorSeleccionado() {
        int index = cboIndicadores.getSelectedIndex();
        Indicador indicador = new Indicador();
        switch (index) {
            case 0:
                indicador = dolar;
                break;
            case 1:
                indicador = euro;
                break;
        }
        return indicador;
    }

    /**
     * Método para crear la matriz de productos a ingresar al elemento JTable
     *
     * @return retorna un objeto DefaultTableModel que contiene una matriz de
     * productos
     */
    private DefaultTableModel mostrarProductos() {
        DefaultTableModel tablemodel = new DefaultTableModel();
        String[] nombreColumnas = {"Id", "Nombre", "Moneda", "Valor Moneda"};
        Producto[] productosTemp = productoTemp.obtenerProductos();
        Object[][] dato = new String[productosTemp.length][4];
        int cont = 0;
        while (cont < productosTemp.length) {
            dato[cont][0] = String.valueOf(productosTemp[cont].getId());
            dato[cont][1] = productosTemp[cont].getNombre();
            dato[cont][2] = productosTemp[cont].getMoneda();
            dato[cont][3] = String.valueOf(productosTemp[cont].getValorMoneda());
            cont++;
        }
        tablemodel.setDataVector(dato, nombreColumnas);
        return tablemodel;
    }

    /**
     * Método para insertar valores a los elementos JTextField correspondientes
     * al valor y fecha del indicador escogido
     */
    private void llenarDatosIndicador() {
        this.txtValorMoneda.setText(String.valueOf(indicadorSeleccionado()
                .getValor()));
        this.txtFechaMoneda.setText(String.valueOf(indicadorSeleccionado()
                .getFecha()));
    }

    /**
     * Método para insertar valores a los elementos JTextField correspondientes
     * al Id y Nombre del producto escogido desde el elemento JTable
     *
     * @param index corresponde a la fila seleccionada en el elemento JTable
     */
    private void llenarDatos(int index) {
        this.txtId.setText(String.valueOf(tbProductos.getValueAt(index, 0)));
        this.txtNombre.setText(String.valueOf(tbProductos.getValueAt(index, 1)));
        this.cboIndicadores.setSelectedItem(String.valueOf(tbProductos
                .getValueAt(index, 2)));
        llenarDatosIndicador();
    }

    /**
     * Método para instanciar el objeto productoTemp con los datos contenidos en
     * los elementos JTextField y JComboBox
     */
    private void instanciarProductoTemp() {
        productoTemp = new Producto(Integer.parseInt(txtId.getText()),
                txtNombre.getText(),
                indicadorSeleccionado().getNombre(),
                Float.parseFloat(txtValorMoneda.getText()));
    }

    /**
     * Método para ejecutar el método grabar() sobre el objeto productoTemp
     * instanciado, que modificará o insertará este producto en la base de
     * datos, según corresponda
     */
    private void grabaProducto() {
        instanciarProductoTemp();
        productoTemp.grabar();
    }

    /**
     * Método para validar que el Id del producto sea un número entero positivo
     *
     * @return retorna true si la validación es correcta y false en caso
     * contrario
     */
    private boolean validaDatos() {
        boolean correcto = false;
        if (esEntero(txtId.getText())) {
            if (Integer.parseInt(txtId.getText()) > 0) {
                correcto = true;
            }
        }
        return correcto;
    }

    /**
     * Método para informar al usuario que el valor ingresado como Id del
     * producto no es un número entero positivo
     */
    private void idErrado() {
        JOptionPane.showMessageDialog(null, "El dato ingresado como Id del"
                + " producto\ndebe ser un número mayor a 0\n");
    }

    /**
     * Método para validar que un string sea transformable a entero
     *
     * @param palabra corresponde al dato a validar
     * @return devuelve true si el número es entero, false si no lo es
     */
    private boolean esEntero(String palabra) {
        try {
            Integer.parseInt(palabra);
            return true;
        } catch (NumberFormatException nfe) {
            return false;
        }
    }

    /**
     * Método para solicitar ingreso de nuevo producto, si la base de datos esta
     * vacía
     */
    private void compruebaBD() {
        if (productoTemp.cantidadProductos() == 0) {
            JOptionPane.showMessageDialog(null, "No hay productos ingresados.\n"
                    + "Ingrese el nombre del primer producto,\n"
                    + "Seleccione la moneda a utilizar,"
                    + "presione el boton 'Guardar'.");
            txtId.setText("1");
            txtId.setEditable(false);
            btnRefrescar.setEnabled(false);
            btnEliminar.setEnabled(false);
            tbProductos.setEnabled(false);
        } else {
            tbProductos.setModel(mostrarProductos());
            txtId.setEditable(true);
            btnRefrescar.setEnabled(true);
            btnEliminar.setEnabled(true);
            tbProductos.setEnabled(true);
        }

    }

    /**
     * Método para solicitar confirmación ante un evento de modificación
     * permanente de la base de datos
     *
     * @param mensaje texto a desplegar
     * @return retorna el valor correspondiente a la opcion elegida
     */
    private int pideConfirmacion(String mensaje) {
        return JOptionPane.showConfirmDialog(null, mensaje + "\n",
                "¿?", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
    }
}
